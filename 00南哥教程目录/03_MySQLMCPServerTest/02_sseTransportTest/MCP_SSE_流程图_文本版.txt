MCP HTTP+SSE 远程调用架构流程图 (文本版)
=====================================================

┌─────────────────────────────────────────────────────────────────────────────────────────┐
│                           MCP HTTP+SSE 远程调用完整流程图                                │
└─────────────────────────────────────────────────────────────────────────────────────────┘

第一层：用户交互层
┌─────────────────┐
│   用户输入查询   │ ←── 例如："查询学生信息表中数据"
│                │
└─────────────────┘
         │
         ▼
第二层：MCP客户端层 (clientChatTest.py)
┌─────────────────────────────────────────────────────────────────────────────────────────┐
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────────────────────────────────────┐  │
│  │  LLMClient  │    │ChatSession  │    │         Server Client                       │  │
│  │             │    │             │    │      (SSE连接管理)                          │  │
│  │ - 大模型调用 │◄──►│ - 会话管理   │◄──►│ - sse_client()                              │  │
│  │ - JSON解析  │    │ - 工具执行   │    │ - ClientSession                             │  │
│  │ - 响应处理  │    │ - 资源读取   │    │ - 异步连接管理                               │  │
│  └─────────────┘    └─────────────┘    └─────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────┘
         │
         ▼ HTTP+SSE连接 (http://127.0.0.1:8000/sse)
第三层：SSE服务器层 (sseServer.py)
┌─────────────────────────────────────────────────────────────────────────────────────────┐
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────────────────────────────────────┐  │
│  │  FastAPI    │    │SseTransport │    │          路由端点                            │  │
│  │   应用      │    │             │    │                                            │  │
│  │ - 应用实例   │◄──►│ - SSE传输    │◄──►│ - GET  /sse (SSE连接)                       │  │
│  │ - 中间件    │    │ - 消息处理   │    │ - POST /messages (消息处理)                  │  │
│  │ - 错误处理  │    │ - 流管理     │    │ - 请求转发                                   │  │
│  └─────────────┘    └─────────────┘    └─────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────┘
         │
         ▼ MCP协议通信
第四层：MySQL MCP服务器层 (mysqlMCPServer.py)
┌─────────────────────────────────────────────────────────────────────────────────────────┐
│  ┌─────────────┐    ┌─────────────┐    ┌─────────────────────────────────────────────┐  │
│  │list_resources│   │read_resource │    │           call_tool                         │  │
│  │             │    │             │    │         (execute_sql)                       │  │
│  │ - 表列表获取 │    │ - 表数据读取 │    │ - SQL语句执行                                │  │
│  │ - 资源描述  │    │ - CSV格式化  │    │ - 结果处理                                   │  │
│  │ - URI生成   │    │ - 错误处理   │    │ - 事务管理                                   │  │
│  └─────────────┘    └─────────────┘    └─────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────┘
         │
         ▼ SQL查询
第五层：数据库层
┌─────────────────────────────────────────────────────────────────────────────────────────┐
│                                MySQL 数据库                                             │
│  ┌─────────────────┐              ┌─────────────────┐                                   │
│  │ students_info   │              │ students_score  │                                   │
│  │ 学生信息表       │              │ 学生成绩表       │                                   │
│  │ - id           │              │ - id           │                                   │
│  │ - name         │              │ - student_id   │                                   │
│  │ - age          │              │ - subject      │                                   │
│  │ - class        │              │ - score        │                                   │
│  └─────────────────┘              └─────────────────┘                                   │
└─────────────────────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════════════════

详细数据流向分析：

1. 请求流向 (Request Flow):
   用户查询 → ChatSession.start() → LLMClient.get_response() → 
   LLM分析 → JSON工具调用 → Server.execute_tool() → 
   SSE连接发送 → sseServer.handle_sse() → 
   MCP协议转发 → mysqlMCPServer.call_tool() → 
   MySQL数据库查询

2. 响应流向 (Response Flow):
   MySQL查询结果 → TextContent格式化 → 
   MCP响应 → SSE流传输 → 
   ClientSession接收 → ChatSession.process_llm_response() → 
   LLMClient二次处理 → 自然语言响应 → 用户

═══════════════════════════════════════════════════════════════════════════════════════════

关键技术点：

🔹 HTTP+SSE协议特点:
  - HTTP: 建立连接和发送请求
  - SSE: 服务器实时推送数据
  - 长连接: 减少连接开销
  - 单向流: 服务器到客户端

🔹 MCP协议实现:
  - 资源管理: URI标识的数据源
  - 工具管理: 可调用的功能接口
  - 会话管理: 连接生命周期控制
  - 异步处理: 全程async/await

🔹 异常处理机制:
  - 连接重试: 最多2次重试
  - 资源清理: 自动释放连接
  - 错误传播: 异常信息完整传递
  - 优雅关闭: 清理所有资源

🔹 配置管理:
  - 环境变量: 数据库和LLM配置
  - JSON配置: 服务器连接信息
  - 动态加载: 运行时配置更新

═══════════════════════════════════════════════════════════════════════════════════════════

典型交互示例：

用户: "查询学生信息表中数据"
  ↓
LLM分析: {"tool": "execute_sql", "arguments": {"query": "SELECT * FROM students_info LIMIT 100"}}
  ↓
MCP执行: SQL查询 → CSV结果
  ↓
LLM转换: "以下是学生信息表中的数据：包含学生姓名、年龄、班级等信息..."
  ↓
用户看到: 自然语言格式的查询结果

═══════════════════════════════════════════════════════════════════════════════════════════