MCP StreamableHTTP 远程调用架构流程图 (文本版)
=====================================================

┌──────────────────────────────────────────────────────────────────────────────┐
│                        MCP StreamableHTTP 远程调用流程图                     │
└──────────────────────────────────────────────────────────────────────────────┘

第一层：用户交互层
┌─────────────────┐
│   用户输入查询   │ ←── 例如："查询学生信息表中数据"
└─────────────────┘
         │
         ▼
第二层：MCP客户端层 (clientChatTest.py / mysqlMCPServerTest.py)
┌──────────────────────────────────────────────────────────────────────────────┐
│  ┌─────────────┐    ┌─────────────┐    ┌──────────────────────────────────┐  │
│  │  LLMClient  │    │ChatSession  │    │ streamablehttp_client            │  │
│  │             │    │             │    │ - HTTP流式连接                   │  │
│  │ - LLM调用    │◄──►│ - 会话管理   │◄──►│ - 读写流 read/write_stream       │  │
│  │ - JSON解析   │    │ - 工具执行   │    │ - 异步连接管理                   │  │
│  │ - 响应处理   │    │ - 资源读取   │    │                                  │  │
│  └─────────────┘    └─────────────┘    └──────────────────────────────────┘  │
└──────────────────────────────────────────────────────────────────────────────┘
         │
         ▼ Streamable HTTP 连接 (http://127.0.0.1:8000/mcp)
第三层：StreamableHTTP 服务器层
┌──────────────────────────────────────────────────────────────────────────────┐
│  ┌─────────────┐    ┌─────────────────────────────────────────────────────┐  │
│  │  FastAPI    │    │  Starlette                                         │  │
│  │ (fastapi_   │    │ (streamablehttpServer.py)                          │  │
│  │ streamable  │    │ - Starlette app/ASGI                               │  │
│  │ http_server │    │ - Mount /mcp 路由                                  │  │
│  │ .py)        │    │ - handle_streamable_http                           │  │
│  │ - FastAPI   │    │ - 生命周期管理 lifespan                             │  │
│  │   app       │    │                                                   │  │
│  │ - Mount /mcp│    │                                                   │  │
│  │ - 生命周期  │    │                                                   │  │
│  │   lifespan  │    │                                                   │  │
│  └─────────────┘    └─────────────────────────────────────────────────────┘  │
│         │                        │                                           │
│         └─────────────┬──────────┘                                           │
│                       ▼                                                      │
│        StreamableHTTPSessionManager.handle_request                            │
│        - 统一处理流式HTTP请求，协议解包、会话管理                              │
└──────────────────────────────────────────────────────────────────────────────┘
         │
         ▼ MCP协议通信
第四层：MySQL MCP服务器层 (mysqlMCPServer.py)
┌──────────────────────────────────────────────────────────────────────────────┐
│  ┌─────────────┐    ┌─────────────┐    ┌──────────────────────────────────┐  │
│  │list_resources│   │read_resource │    │           call_tool             │  │
│  │ - 表列表获取 │    │ - 表数据读取 │    │ - SQL语句执行                   │  │
│  │ - 资源描述  │    │ - CSV格式化  │    │ - 结果处理                      │  │
│  │ - URI生成   │    │ - 错误处理   │    │ - 事务管理                      │  │
│  └─────────────┘    └─────────────┘    └──────────────────────────────────┘  │
└──────────────────────────────────────────────────────────────────────────────┘
         │
         ▼ SQL查询
第五层：数据库层
┌──────────────────────────────────────────────────────────────────────────────┐
│                                MySQL 数据库                                 │
│  ┌─────────────────┐              ┌─────────────────┐                       │
│  │ students_info   │              │ students_score  │                       │
│  │ - id           │              │ - id           │                       │
│  │ - name         │              │ - student_id   │                       │
│  │ - age          │              │ - subject      │                       │
│  │ - class        │              │ - score        │                       │
│  └─────────────────┘              └─────────────────┘                       │
└──────────────────────────────────────────────────────────────────────────────┘

════════════════════════════════════════════════════════════════════════════════

详细数据流向分析：

1. 请求流向 (Request Flow):
   用户查询 → ChatSession.start() → LLMClient.get_response() → 
   LLM分析 → JSON工具调用 → Server.execute_tool() → 
   streamablehttp_client 发送 → StreamableHTTPSessionManager.handle_request() → 
   MCP协议转发 → mysqlMCPServer.call_tool() → 
   MySQL数据库查询

2. 响应流向 (Response Flow):
   MySQL查询结果 → TextContent格式化 → 
   MCP响应 → StreamableHTTPSessionManager流式传输 → 
   ClientSession接收 → ChatSession.process_llm_response() → 
   LLMClient二次处理 → 自然语言响应 → 用户

════════════════════════════════════════════════════════════════════════════════

关键技术点：

🔹 Streamable HTTP 协议特点:
  - HTTP长连接，支持流式数据传输
  - 统一ASGI协议，支持FastAPI/Starlette等多种框架
  - 单向/双向流，低延迟

🔹 MCP协议实现:
  - 资源管理、工具管理、会话管理
  - 异步处理，async/await全链路

🔹 异常处理机制:
  - 连接重试、资源清理、错误传播、优雅关闭

🔹 配置管理:
  - 环境变量、JSON配置、动态加载

════════════════════════════════════════════════════════════════════════════════

典型交互示例：

用户: "查询学生信息表中数据"
  ↓
LLM分析: {"tool": "execute_sql", "arguments": {"query": "SELECT * FROM students_info LIMIT 100"}}
  ↓
MCP执行: SQL查询 → CSV结果
  ↓
LLM转换: "以下是学生信息表中的数据：包含学生姓名、年龄、班级等信息..."
  ↓
用户看到: 自然语言格式的查询结果

════════════════════════════════════════════════════════════════════════════════ 